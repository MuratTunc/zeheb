version: '3.9'

services:
  # User Service
  user-service:
    build:
      context: ./../user-service
      dockerfile: ./../user-service/user-service.dockerfile
    image: ${USER_SERVICE_IMAGE_NAME}
    container_name: ${USER_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      user-db:
        condition: service_healthy
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"  # Map the user service port from the host to the container    
    env_file:
      - .env
    networks:
      - app-network

  # Mail Service
  mail-service:
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    image: ${MAIL_SERVICE_IMAGE_NAME}
    container_name: ${MAIL_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      user-db:
        condition: service_healthy
    ports:
      - "${MAIL_SERVICE_PORT}:${MAIL_SERVICE_PORT}"    
    env_file:
      - .env
    networks:
      - app-network    

  # User Database
  user-db:
    image: postgres:15
    container_name: ${USER_POSTGRES_DB_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_USER: ${USER_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${USER_POSTGRES_DB_NAME}
    ports:
      - "${USER_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${USER_POSTGRES_DB_USER}", "-d", "${USER_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Mail Database
  mail-db:
    image: postgres:15
    container_name: ${MAIL_POSTGRES_DB_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_USER: ${MAIL_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${MAIL_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${MAIL_POSTGRES_DB_NAME}
    ports:
      - "${MAIL_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container  
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${MAIL_POSTGRES_DB_USER}", "-d", "${MAIL_POSTGRES_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mail_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Nginx Reverse Proxy
  # Nginx Reverse Proxy
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "${NGINX_SERVICE_PORT}:80"
    volumes:
      - ./nginx/zehebfind.conf:/etc/nginx/conf.d/zehebfind.conf:ro  # Mount the config file here
      - ./../frontend/build:/usr/share/nginx/html  # Ensure frontend build folder exists
    depends_on:
      - user-service
      - mail-service
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  user_db_data:
  mail_db_data:
