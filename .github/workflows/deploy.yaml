name: Deploy Backend and Frontend to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER_NAME: ${{ secrets.SERVER_USER_NAME }}
      SERVER_PROJECT_DIR: "/home/${{ secrets.SERVER_USER_NAME }}/zeheb"
      REPO: "git@github.com:MuratTunc/zeheb.git"
      RUN_BACKEND_DEPLOY: true  # Set to true or false to toggle back-end deployment
      RUN_FRONTEND_DEPLOY: false  # Set to true or false to toggle front-end deployment

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        continue-on-error: false

      # Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
        continue-on-error: false

      # Add the server to known hosts
      - name: Add server to known hosts
        run: |
          echo "Adding server to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts || { echo "Failed to add host to known hosts"; exit 1; }

      # Deploy the repository to the server
      - name: Clone Repository to Server
        run: |
          echo "Deploying repository to the server..."
          ssh -v -T -o StrictHostKeyChecking=no ${{ env.SERVER_USER_NAME }}@${{ env.SERVER_IP }} << EOF
          set -e  # Stop script on error

          # Check if the project directory exists
            if [ ! -d "${{ env.SERVER_PROJECT_DIR }}" ]; then
              echo "Directory does not exist. Creating project directory and cloning repository..."
              mkdir -p "${{ env.SERVER_PROJECT_DIR }}"
              git clone "${{ env.REPO }}" "${{ env.SERVER_PROJECT_DIR }}"
            else
              # Check if the directory is a valid Git repository
              if [ ! -d "${{ env.SERVER_PROJECT_DIR }}/.git" ]; then
                echo "Directory exists but is not a valid Git repository. Re-cloning repository..."
                rm -rf "${{ env.SERVER_PROJECT_DIR }}"
                mkdir -p "${{ env.SERVER_PROJECT_DIR }}"
                git clone "${{ env.REPO }}" "${{ env.SERVER_PROJECT_DIR }}"
              else
                echo "Directory exists and is a valid Git repository. Pulling latest changes..."
                cd "${{ env.SERVER_PROJECT_DIR }}"
                git reset --hard
                git pull origin main
              fi
            fi
          EOF

      # Deploy Back-End Services
      - name: Deploy Back-End Services
        if: env.RUN_BACKEND_DEPLOY == 'true'
        run: |
          echo "Deploying back-end services..."
          ssh -T -o StrictHostKeyChecking=no ${{ env.SERVER_USER_NAME }}@${{ env.SERVER_IP }} << EOF
            set -e  # Stop script on error

            # Navigate to the build-tools directory
            cd "${{ env.SERVER_PROJECT_DIR }}/back-end/build-tools"
            echo "Running 'make down' and 'make up_build'..."
            sudo make down || { echo "'make down' failed!"; exit 1; }
            sudo make up_build || { echo "'make up_build' failed!"; exit 1; }
          EOF

      # Deploy Front-End
      - name: Deploy Front-End
        if: env.RUN_FRONTEND_DEPLOY == 'false'
        run: |
          echo "Deploying front-end..."
          ssh -T -o StrictHostKeyChecking=no ${{ env.SERVER_USER_NAME }}@${{ env.SERVER_IP }} << EOF
            set -e  # Stop script on error

            # Navigate to the web-app directory
            cd "${{ env.SERVER_PROJECT_DIR }}/web-app"
            echo "Installing front-end dependencies..."
            npm install || { echo "npm install failed!"; exit 1; }

            echo "Building front-end..."
            npm run build || { echo "npm build failed!"; exit 1; }

            echo "Copying front-end build files to Nginx web root..."
            sudo rm -rf /var/www/html/*  # Clean existing files
            sudo cp -r "${{ env.SERVER_PROJECT_DIR }}/web-app/build/*" /var/www/html/

            echo "Front-end deployed successfully!"
          EOF
