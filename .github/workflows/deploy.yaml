name: Deploy Backend and Frontend to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        continue-on-error: false

      # Set up SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
        continue-on-error: false

      # Add the server to known hosts
      - name: Add server to known hosts
        run: |
          echo "Adding server to known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts || { echo "Failed to add host to known hosts"; exit 1; }

      # Deploy the repository to the server
      - name: Clone Repository to Server
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          SERVER_USER_NAME="${{ secrets.SERVER_USER_NAME }}"
          SERVER_PROJECT_DIR="${{ secrets.SERVER_PROJECT_DIR }}"
          REPO="${{ secrets.REPO }}"
    
          echo "Deploying repository to the server..."
    
          # Ensure the environment variables are not empty
          if [[ -z "$SERVER_IP" || -z "$SERVER_USER_NAME" || -z "$SERVER_PROJECT_DIR" ]]; then
            echo "Error: Missing required environment variables. Please check SERVER_IP, SERVER_USER_NAME, and SERVER_PROJECT_DIR."
            exit 1
          fi
    
          ssh -T -o StrictHostKeyChecking=no $SERVER_USER_NAME@$SERVER_IP << EOF
            set -e  # Stop script on error
    
            # Start SSH agent if not already running
            eval \$(ssh-agent -s)
    
            # Add private key to SSH agent
            ssh-add ~/.ssh/id_rsa
    
            # Ensure GitHub is in known hosts
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
    
            # Check if the project directory exists, if not, create it and clone the repository
            if [ ! -d "$SERVER_PROJECT_DIR" ]; then
              echo "Creating project directory..."
              mkdir -p "$SERVER_PROJECT_DIR"
              echo "Directory does not exist. Cloning repository..."
              git clone git@github.com:MuratTunc/zeheb.git "$SERVER_PROJECT_DIR"
            else
              echo "Directory exists. Pulling latest changes..."
              cd "$SERVER_PROJECT_DIR"
              git reset --hard
              git pull origin main
            fi
          EOF
    

      - name: Upload .env file to the server
        run: |
            SERVER_USER_NAME="${{ secrets.SERVER_USER_NAME }}"
            SERVER_IP="${{ secrets.SERVER_IP }}"
            SERVER_PROJECT_DIR="${{ secrets.SERVER_PROJECT_DIR }}"
            echo "Uploading .env file to the server..."
            scp back-end/build-tools/.env $SERVER_USER_NAME@$SERVER_IP:$SERVER_PROJECT_DIR/back-end/build-tools/    

      - name: Deploy Back-End Services
        if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge branch back-end-dev')
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          SERVER_USER_NAME="${{ secrets.SERVER_USER_NAME }}"
          SERVER_PROJECT_DIR="${{ secrets.SERVER_PROJECT_DIR }}"

          echo "Deploying back-end services..."
          ssh -T -o StrictHostKeyChecking=no $SERVER_USER_NAME@$SERVER_IP << EOF
            set -e  # Stop script on error

            # Navigate to the build-tools directory
            cd $SERVER_PROJECT_DIR/back-end/build-tools
            echo "Running 'make down' and 'make up_build'..."
            sudo make down || { echo "'make down' failed!"; exit 1; }
            sudo make up_build || { echo "'make up_build' failed!"; exit 1; }
          EOF

      - name: Deploy Front-End
        if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge branch web-app-dev')
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          SERVER_USER_NAME="${{ secrets.SERVER_USER_NAME }}"
          SERVER_PROJECT_DIR="${{ secrets.SERVER_PROJECT_DIR }}"

          echo "Deploying front-end..."
          ssh -T -o StrictHostKeyChecking=no $SERVER_USER_NAME@$SERVER_IP << EOF
            set -e  # Stop script on error

            # Navigate to the web-app directory
            cd $SERVER_PROJECT_DIR/web-app
            echo "Installing front-end dependencies..."
            npm install || { echo "npm install failed!"; exit 1; }

            echo "Building front-end..."
            npm run build || { echo "npm build failed!"; exit 1; }

            echo "Copying front-end build files to Nginx web root..."
            sudo rm -rf /var/www/html/*  # Clean existing files
            sudo cp -r $SERVER_PROJECT_DIR/web-app/build/* /var/www/html/

            echo "Front-end deployed successfully!"
          EOF
